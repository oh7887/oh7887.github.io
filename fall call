//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract fall{
    uint256 public score;
    bool public isFallback = false;
    bool public isReceive = false;

    
    function isCompleted()public{
        score=0;
        if(msg.sender!=tx.origin){
            score=25;
        }
        if(isFallback||isReceive){
            score=50;
        }
        if(isFallback&&isReceive){
            score=100;
        }
    }
    fallback()external payable{
        require(!isFallback,"already fallback");
        isFallback=true;
    }
    receive()external payable{
        require(!isReceive,"already receive");
        isReceive=true;
    }
}
contract att
{
    fall public f;
    constructor(address payable add)public   
    {
        f=fall(add);
    }
    function a() public  
    {
          (bool success, ) = address(f).call(abi.encodePacked(bytes4(keccak256("nonExistentFunction()"))));
        require(success, "Fallback function not triggered");
    }
}
