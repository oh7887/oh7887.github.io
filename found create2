pragma solidity ^0.8.0;

contract found{
    bool public resove = false;
    
    constructor(){
        if(address(this).balance >= 0.001 ether){
            resove = true;
        }  
    }
    
    function getResove() public view returns(bool){
        return resove;
    }
    
}

contract check{
    found public target;
    uint public score;
    
    function depoly(bytes32 _salt) public returns(address){
        target = new found{salt: _salt}();
        return address(target);
    }
    
    function isCompleted() public {
        score = 0;
        if(address(target) != address(0)){
            score += 30;
        }
        if(target.getResove()){
            score += 70;
        }
    }
}



contract Create2Predictor {
    address public add;
    bytes32 public bycode=keccak256(type(found).creationCode);
    function predictCreate2Address(
        address creator,
        bytes32 salt
       
    ) public returns (address) {
        bytes32 input = keccak256(abi.encodePacked(uint8(0xff), creator, salt, keccak256(type(found).creationCode)));
        add=address(uint160(uint256(input)));
        return address(uint160(uint256(input)));
    }
        function a1() public payable {
        
        payable(add).call{value:1 ether}("");
    }
}
